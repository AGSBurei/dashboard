plugins {
    id 'org.springframework.boot' version '2.4.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'java'
    id 'war'
    id "com.github.node-gradle.node" version "2.2.4"
}

group = 'dash.epitech'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

node {
    // Version of node to use.
    version = '14.15.1'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = false
    // Base URL for fetching node distributions (change if you have a mirror).
//    distBaseUrl = 'https://nodejs.org/dist'

    // Set the work directory for unpacking node
    workDir = file("${project.projectDir}/front/nodejs")
    // Set the work directory for NPM
    npmWorkDir = file("${project.projectDir}/front/npm")
    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/front")
}

processResources{
    dependsOn 'copyFrontendToBuild'
}

task copyFrontendToBuild(type: Copy) {
    from "$projectDir/front/build/"
    into "$buildDir/resources/main/static"
}

task npmBuild(type: NpmTask) {
    dependsOn('npmInstall2')
//    execOverrides {
//        it.workingDir = '/front'
//    }
    args = ['run', 'build']
}

task npmShowVersion(type: NpmTask) {
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = '/front'
    }
    args = ['--version']
}

task npmInstall2(type: NpmTask) {
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = '/front'
    }
    args = ['install']
}

bootJar.dependsOn(copyFrontendToBuild)
compileJava.dependsOn(npmBuild)


ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springBootAdminVersion', "2.3.1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'de.codecentric:spring-boot-admin-starter-client'
//    implementation 'de.codecentric:spring-boot-admin-starter-server'
    implementation 'org.springframework.session:spring-session-core'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.4.0'
    compileOnly 'org.projectlombok:lombok'
    compile("org.springframework.boot:spring-boot-starter-mail")
    compile 'com.google.api-client:google-api-client:1.30.10'
    compile("org.springframework.boot:spring-boot-starter-mail")

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    compile 'com.mashape.unirest:unirest-java:1.4.9'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.4'
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
    }
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}
